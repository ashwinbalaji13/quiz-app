{"version":3,"sources":["components/Result.js","components/Question.js","App.js","serviceWorker.js","index.js"],"names":["Result","react_default","a","createElement","className","data-type","style","display","this","props","isFinished","score","length","React","Component","Question","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onChanged","bind","assertThisInitialized","state","chosenAnswer","disabled","nextProps","setState","event","console","log","target","name","ReactDOM","findDOMNode","parentNode","parentElement","isValid","hasAttribute","setAttribute","isAnswerMode","currentQuestion","image","src","alt","question","components_Result","key","_this2","choices","forEach","choice","i","correctAnswer","push","data-valid","ref","type","onChange","renderImage","renderQuestion","renderResult","App","quiz","handleClick","components_Question","Button","color","onClick","Boolean","window","location","hostname","match","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3b1d5506.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Result extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"quiz-panel\" data-type=\"finish\" style={{ display: this.props.isFinished ? 'block' : 'none' }}>\r\n                <h3>Great job!</h3>\r\n                <p className=\"result\">You guessed <b>{this.props.score}</b> out of <b>{this.props.length}</b>!</p>\r\n            </div>            \r\n        );\r\n    }\r\n}\r\n\r\nexport default Result;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Result from './Result'\r\n\r\nclass Question extends React.Component {\r\n\r\n    constructor() {\r\n        super();       \r\n        this.onChanged = this.onChanged.bind(this);\r\n        this.state = {\r\n            chosenAnswer: null,\r\n            disabled: false,\r\n            score: 0\r\n        };\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        this.setState({\r\n            disabled: false\r\n        });\r\n    }\r\n\r\n    onChanged(event) {\r\n        //console.log(\"Question.onChanged ==> event : \", event)\r\n        console.log(\"Question.onChanged ==> event name : \", event.target.name);\r\n        //console.log(ReactDOM.findDOMNode(event.target).parentNode.parentElement.hasAttribute(\"data-valid\"));\r\n        let chosenAnswer = ReactDOM.findDOMNode(event.target).parentNode.parentElement; //<li>\r\n        console.log(\"Question.onChanged ==> chosenAnswer : \", chosenAnswer);\r\n        //let parent = ReactDOM.findDOMNode(event.target).parentNode.parentElement.parentElement;\r\n        //console.log(\"Question.onChanged ==> parent : \", parent);\r\n        //console.log(\"Question.onChanged ==> childElementCount : \", parent.childElementCount);\r\n        //console.log(\"Question.onChanged ==> childNodes : \", parent.childNodes);\r\n\r\n        //check whether user selected valid answer\r\n        let isValid = chosenAnswer.hasAttribute(\"data-valid\");\r\n        console.log(\"Question.onChanged ==> isValid : \", isValid);\r\n        if (isValid)\r\n            chosenAnswer.setAttribute(\"class\", \"right\")\r\n        else\r\n            chosenAnswer.setAttribute(\"class\", \"wrong\")\r\n        this.setState({\r\n            isAnswerMode: false,\r\n            chosenAnswer: event.target,\r\n            disabled: true,\r\n            score: isValid ? this.state.score + 1 : this.state.score\r\n        });\r\n    }\r\n\r\n    renderImage() {\r\n        if (this.props.currentQuestion.image) {\r\n            return (\r\n                <div className=\"question\">\r\n                    <img src={this.props.currentQuestion.image} alt={this.props.currentQuestion.question}></img>\r\n                </div>\r\n            );\r\n        } else {\r\n            return (null);\r\n        }\r\n    }\r\n\r\n    renderResult() {\r\n        if (this.props.isFinished) {\r\n            return (<Result isFinished={this.props.isFinished} length={this.props.length} score={this.state.score} key=\"result\" />);\r\n        } else {\r\n            return (null);\r\n        }\r\n    }\r\n\r\n    renderQuestion() {\r\n        if (!this.props.isFinished) {\r\n            let choices = [];\r\n            if (this.props.currentQuestion) {\r\n                this.props.currentQuestion.choices.forEach((choice, i) => {\r\n                    console.log(\"Question.render ==> index\", i)\r\n                    if (choice === this.props.currentQuestion.correctAnswer)\r\n                        choices.push(\r\n                            <li data-valid=\"1\" key={choice} ref={choice}>\r\n                                <label>\r\n                                    <input type=\"radio\" name={\"ans-\" + i} disabled={this.state.disabled ? true : false} onChange={(event) => this.onChanged(event)} />\r\n                                    <span>{choice}</span>\r\n                                </label>\r\n                            </li>\r\n                        )\r\n                    else\r\n                        choices.push(\r\n                            <li key={choice} ref={choice}>\r\n                                <label>\r\n                                    <input type=\"radio\" name={\"ans-\" + i} disabled={this.state.disabled ? true : false} onChange={(event) => this.onChanged(event)} />\r\n                                    <span>{choice}</span>\r\n                                </label>\r\n                            </li>\r\n                        );\r\n                });\r\n            }\r\n            console.log(\"choices \", choices)\r\n\r\n            return (\r\n                <div className=\"quiz-panel\" key=\"quiz-panel\" data-type=\"question\" style={{ display: \"block\" }}>\r\n                    <h3>{this.props.currentQuestion.question}</h3>\r\n                    {this.renderImage()}\r\n                    <ul>\r\n                        {choices}\r\n                    </ul>\r\n                </div>\r\n            );\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n    render() {\r\n        console.log(\"Question.render ==> state : \", this.state)\r\n        console.log(\"Question.render ==> props : \", this.props);\r\n\r\n        return [(           \r\n            this.renderQuestion()\r\n        ),\r\n        (\r\n            this.renderResult()\r\n        )\r\n        ]\r\n    }\r\n}\r\n\r\nexport default Question;","import React from 'react';\nimport './App.css';\nimport { Button } from 'reactstrap';\nimport Question from './components/Question'\n\nclass App extends React.Component {\n\n  constructor() {\n    console.log(\"constructor\")\n    super();\n    this.state = {\n      currentQuestion: 0,\n      isFinished: false,\n      quiz: [\n        {\n          question: \"What is React?\",\n          choices: [\"A JavaScript framework\", \"CSS preprocessor\", \"Language that compiles to CoffeeScript\"],\n          correctAnswer: \"A JavaScript framework\"\n        },\n        {\n          question: \"Who made React?\",\n          choices: [\"Google\", \"Twitter\", \"Facebook\"],\n          correctAnswer: \"Facebook\"\n        },\n        {\n          question: \"What is React used for?\",\n          choices: [\"Adding variables to CSS\", \"Building web apps\", \"Making websites cloud-ready\"],\n          correctAnswer: \"Building web apps\"\n        },\n        {\n          question: \"What is special about React?\",\n          choices: [\"It brings HTML6 features to today's browser\", \"Virtual DOM\", \"Database integration\"],\n          correctAnswer: \"Virtual DOM\"\n        },\n        {\n          question: \"Which language is this?\",\n          image: \"https://tutorialzine.com/media/2014/07/3.png\",\n          choices: [\"JavaScript\", \"CoffeeScript\", \"JSX\"],\n          correctAnswer: \"JSX\"\n        },\n        {\n          question: \"What does this component do?\",\n          image: \"https://tutorialzine.com/media/2014/07/1.png\",\n          choices: [\"Prints 'Hello World!'\", \"Prints 'Hello', followed by the name attribute that was passed when initializing the component\", \"Prints the numbers from 1 to 10.\"],\n          correctAnswer: \"Prints 'Hello', followed by the name attribute that was passed when initializing the component\"\n        },\n        {\n          question: \"What does this code do?\",\n          image: \"https://tutorialzine.com/media/2014/07/2.png\",\n          choices: [\"Provides an initial value for the component's state\", \"Tells how many times the component should be focused\", \"Seeds a random number generator\"],\n          correctAnswer: \"Provides an initial value for the component's state\"\n        },\n        {\n          question: \"What does this code do?\",\n          image: \"https://tutorialzine.com/media/2014/07/4.png\",\n          choices: [\"Initializes a new UL component, and generates LI components for each entry in the items array property.\", \"Initializes a Google Map for every location in the items array\", \"It won't work\"],\n          correctAnswer: \"Initializes a new UL component, and generates LI components for each entry in the items array property.\"\n        }\n      ]\n    };\n\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n\n  handleClick(event) {\n\n    this.setState(state => ({\n      currentQuestion: state.currentQuestion + 1\n    }));\n\n    if (this.state.currentQuestion === this.state.quiz.length - 1) {\n      this.setState({\n        isFinished: true\n      })\n    }\n\n  }\n\n  renderQuestion() {\n    return (<Question currentQuestion={this.state.quiz[this.state.currentQuestion]} isFinished={this.state.isFinished} length={this.state.quiz.length} key=\"question\" />);\n  }\n\n  render() {\n    //when state changes the width changes\n    console.log(\"App.render ==> state : \", this.state)\n    console.log(\"App.render ==> props : \", this.props);\n    return (\n      <div>\n        <div className=\"quiz\" style={{ display: \"block\" }}>\n          {this.renderQuestion()}\n          <div className=\"bottom\" style={{ display: this.state.isFinished ? 'none' : 'block' }}>\n            <Button color=\"primary\" onClick={this.handleClick} name=\"next\">Next</Button>\n            <p className=\"quiz-progress\"><b>{this.state.currentQuestion + 1}</b> of <b>{this.state.quiz.length}</b></p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}